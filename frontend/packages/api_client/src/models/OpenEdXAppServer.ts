/* tslint:disable */
/* eslint-disable */
/**
 * OpenCraft Instance Manager
 * API for OpenCraft Instance Manager
 *
 * The version of the OpenAPI document: api
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    InstanceReferenceMinimal,
    InstanceReferenceMinimalFromJSON,
    InstanceReferenceMinimalFromJSONTyped,
    InstanceReferenceMinimalToJSON,
    OpenStackServer,
    OpenStackServerFromJSON,
    OpenStackServerFromJSONTyped,
    OpenStackServerToJSON,
} from './';

/**
 * 
 * @export
 * @interface OpenEdXAppServer
 */
export interface OpenEdXAppServer {
    /**
     * The default contact email for this instance; also used as the from address for emails sent by the server.
     * @type {string}
     * @memberof OpenEdXAppServer
     */
    email?: string;
    /**
     * URL to the privacy policy.
     * @type {string}
     * @memberof OpenEdXAppServer
     */
    privacyPolicyUrl?: string;
    /**
     * Set this to a release tag like \"named-release/dogwood\" to build a specific release of Open edX. This setting becomes the default value for edx_platform_version, forum_version, notifier_version, xqueue_version, and certs_version so it should be a git branch that exists in all of those repositories. Note: to build a specific branch of edx-platform, you should just override edx_platform_commit rather than changing this setting. Note 2: This value does not affect the default value of configuration_version.
     * @type {string}
     * @memberof OpenEdXAppServer
     */
    openedxRelease?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenEdXAppServer
     */
    configurationSourceRepoUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenEdXAppServer
     */
    configurationVersion?: string;
    /**
     * YAML config vars that override all others
     * @type {string}
     * @memberof OpenEdXAppServer
     */
    configurationExtraSettings?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenEdXAppServer
     */
    configurationPlaybookName?: string;
    /**
     * URL to the edx-platform repository to use. Leave blank for default.
     * @type {string}
     * @memberof OpenEdXAppServer
     */
    edxPlatformRepositoryUrl?: string;
    /**
     * edx-platform commit hash or branch or tag to use. Leave blank to use the default, which is equal to the value of \"openedx_release\".
     * @type {string}
     * @memberof OpenEdXAppServer
     */
    edxPlatformCommit: string;
    /**
     * JSON openstack flavor selector, e.g. {\"name\": \"vps-ssd-1\"}. Defaults to settings.OPENSTACK_SANDBOX_FLAVOR on server creation.
     * @type {object}
     * @memberof OpenEdXAppServer
     */
    openstackServerFlavor?: object | null;
    /**
     * JSON openstack base image selector, e.g. {\"name\": \"xenial-16.04-unmodified\"} Defaults to settings.OPENSTACK_SANDBOX_BASE_IMAGE on server creation.
     * @type {object}
     * @memberof OpenEdXAppServer
     */
    openstackServerBaseImage?: object | null;
    /**
     * SSH key name used when setting up access to the openstack project. Defaults to settings.OPENSTACK_SANDBOX_SSH_KEYNAME on server creation.
     * @type {string}
     * @memberof OpenEdXAppServer
     */
    openstackServerSshKeyname?: string | null;
    /**
     * Optional: A list of extra OpenStack security group names to use for this instance\'s VMs. A typical use case is to grant this instance access to a private database server that is behind a firewall. (In the django admin, separate group names with a comma.)
     * @type {Array<string>}
     * @memberof OpenEdXAppServer
     */
    additionalSecurityGroups?: Array<string>;
    /**
     * Optional: A list of additional email addresses other than settings.ADMINS who should receive alerts from New Relic Synthetics Monitors when this instance becomes unavailable.
     * @type {Array<string>}
     * @memberof OpenEdXAppServer
     */
    additionalMonitoringEmails?: Array<string>;
    /**
     * Optional: A list of additional email addresses other than settings.ADMINS who should receive alerts when an AppServer fails to provision.
     * @type {Array<string>}
     * @memberof OpenEdXAppServer
     */
    provisioningFailureNotificationEmails?: Array<string>;
    /**
     * The number of Open edX AppServers to deploy for this instance.
     * @type {number}
     * @memberof OpenEdXAppServer
     */
    openedxAppserverCount?: number;
    /**
     * YAML vars for database configuration
     * @type {string}
     * @memberof OpenEdXAppServer
     */
    configurationDatabaseSettings?: string;
    /**
     * YAML vars for storage configuration
     * @type {string}
     * @memberof OpenEdXAppServer
     */
    configurationStorageSettings?: string;
    /**
     * YAML vars for theme configuration
     * @type {string}
     * @memberof OpenEdXAppServer
     */
    configurationThemeSettings?: string;
    /**
     * YAML vars for setting SiteConfiguration variables
     * @type {string}
     * @memberof OpenEdXAppServer
     */
    configurationSiteConfigurationSettings?: string | null;
    /**
     * YAML variables for commonly needed services.
     * @type {string}
     * @memberof OpenEdXAppServer
     */
    commonConfigurationSettings?: string;
    /**
     * A record of the combined (final) ansible variables passed to the configuration playbook when configuring this AppServer.
     * @type {string}
     * @memberof OpenEdXAppServer
     */
    configurationSettings: string;
    /**
     * 
     * @type {InstanceReferenceMinimal}
     * @memberof OpenEdXAppServer
     */
    instance: InstanceReferenceMinimal;
    /**
     * 
     * @type {OpenStackServer}
     * @memberof OpenEdXAppServer
     */
    server: OpenStackServer;
}

export function OpenEdXAppServerFromJSON(json: any): OpenEdXAppServer {
    return OpenEdXAppServerFromJSONTyped(json, false);
}

export function OpenEdXAppServerFromJSONTyped(json: any, ignoreDiscriminator: boolean): OpenEdXAppServer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'email': !exists(json, 'email') ? undefined : json['email'],
        'privacyPolicyUrl': !exists(json, 'privacy_policy_url') ? undefined : json['privacy_policy_url'],
        'openedxRelease': !exists(json, 'openedx_release') ? undefined : json['openedx_release'],
        'configurationSourceRepoUrl': !exists(json, 'configuration_source_repo_url') ? undefined : json['configuration_source_repo_url'],
        'configurationVersion': !exists(json, 'configuration_version') ? undefined : json['configuration_version'],
        'configurationExtraSettings': !exists(json, 'configuration_extra_settings') ? undefined : json['configuration_extra_settings'],
        'configurationPlaybookName': !exists(json, 'configuration_playbook_name') ? undefined : json['configuration_playbook_name'],
        'edxPlatformRepositoryUrl': !exists(json, 'edx_platform_repository_url') ? undefined : json['edx_platform_repository_url'],
        'edxPlatformCommit': json['edx_platform_commit'],
        'openstackServerFlavor': !exists(json, 'openstack_server_flavor') ? undefined : json['openstack_server_flavor'],
        'openstackServerBaseImage': !exists(json, 'openstack_server_base_image') ? undefined : json['openstack_server_base_image'],
        'openstackServerSshKeyname': !exists(json, 'openstack_server_ssh_keyname') ? undefined : json['openstack_server_ssh_keyname'],
        'additionalSecurityGroups': !exists(json, 'additional_security_groups') ? undefined : json['additional_security_groups'],
        'additionalMonitoringEmails': !exists(json, 'additional_monitoring_emails') ? undefined : json['additional_monitoring_emails'],
        'provisioningFailureNotificationEmails': !exists(json, 'provisioning_failure_notification_emails') ? undefined : json['provisioning_failure_notification_emails'],
        'openedxAppserverCount': !exists(json, 'openedx_appserver_count') ? undefined : json['openedx_appserver_count'],
        'configurationDatabaseSettings': !exists(json, 'configuration_database_settings') ? undefined : json['configuration_database_settings'],
        'configurationStorageSettings': !exists(json, 'configuration_storage_settings') ? undefined : json['configuration_storage_settings'],
        'configurationThemeSettings': !exists(json, 'configuration_theme_settings') ? undefined : json['configuration_theme_settings'],
        'configurationSiteConfigurationSettings': !exists(json, 'configuration_site_configuration_settings') ? undefined : json['configuration_site_configuration_settings'],
        'commonConfigurationSettings': !exists(json, 'common_configuration_settings') ? undefined : json['common_configuration_settings'],
        'configurationSettings': json['configuration_settings'],
        'instance': InstanceReferenceMinimalFromJSON(json['instance']),
        'server': OpenStackServerFromJSON(json['server']),
    };
}

export function OpenEdXAppServerToJSON(value?: OpenEdXAppServer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'email': value.email,
        'privacy_policy_url': value.privacyPolicyUrl,
        'openedx_release': value.openedxRelease,
        'configuration_source_repo_url': value.configurationSourceRepoUrl,
        'configuration_version': value.configurationVersion,
        'configuration_extra_settings': value.configurationExtraSettings,
        'configuration_playbook_name': value.configurationPlaybookName,
        'edx_platform_repository_url': value.edxPlatformRepositoryUrl,
        'edx_platform_commit': value.edxPlatformCommit,
        'openstack_server_flavor': value.openstackServerFlavor,
        'openstack_server_base_image': value.openstackServerBaseImage,
        'openstack_server_ssh_keyname': value.openstackServerSshKeyname,
        'additional_security_groups': value.additionalSecurityGroups,
        'additional_monitoring_emails': value.additionalMonitoringEmails,
        'provisioning_failure_notification_emails': value.provisioningFailureNotificationEmails,
        'openedx_appserver_count': value.openedxAppserverCount,
        'configuration_database_settings': value.configurationDatabaseSettings,
        'configuration_storage_settings': value.configurationStorageSettings,
        'configuration_theme_settings': value.configurationThemeSettings,
        'configuration_site_configuration_settings': value.configurationSiteConfigurationSettings,
        'common_configuration_settings': value.commonConfigurationSettings,
        'configuration_settings': value.configurationSettings,
        'instance': InstanceReferenceMinimalToJSON(value.instance),
        'server': OpenStackServerToJSON(value.server),
    };
}


